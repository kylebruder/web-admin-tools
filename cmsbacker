#!/bin/bash
# A shell wrapper to use cmsdump.pl to back up a user's site or sites.
# By kyle@kbruder.info
# Last modified 02/23/2019

##### Begin Static variables ###################################################
# Change these with caution
user=$1
site=$2
date=`date +%Y-%m-%d`
arg_count=$#
# Randomize the config list names to avoid clobbering existing files
# It is best to leave these as they are unless you want to specify a path
# Example : file1="/tmp/"`echo $RANDOM | sha1sum | cut -d ' ' -f 1`".txt" 
file1=`echo $RANDOM | sha1sum | cut -d ' ' -f 1`".txt"
file2=`echo $RANDOM | sha1sum | cut -d ' ' -f 1`".txt"
##### End Static variables #####################################################

##### Begin custom variables ###################################################
# This script is configured by editing cmsbacker.conf
conf="cmsbacker.conf"
source $conf
##### Begin main function ######################################################

## Choose which functions you would like to run here ##
## See the comments inside of the funtions for details
# The recommended order is:
# check_args
# backup
# show_complete
# aws_s3
# notify
main() {
	check_disk
	check_args
	backup
	show_complete
	aws_s3		# Must have aws-cli installed and correct IAM permissions
	notify	
}
##### End main function #######################################################

##### Begin functions #########################################################
check_disk() {
	disk_use=`df -k | grep $disk | tr -s ' ' | cut -d" " -f 5 | cut -d '%' -f 1`
        if (( $disk_use > $disk_max_percent )); then
                echo "The disk is too full. It is at "$disk_use"% capacity. Please make some space."
                exit
        fi
}
check_args() {
# Check the arguments passed from the CLI
	if (( $arg_count < 1 )); then
		echo "You must supply at least one argument."
		echo "Example for backing all of a user's sites:"
		echo "cmsbacker user" 
		echo "Example for backing one of a user's sites:"
		echo "cmsbacker user www.example.com"
		exit 3
	fi
	if [ ! -d $userhome ]; then
        	echo "Customer $user not found!"
        	exit 1
	fi
}
backup() {
	# If a site was specified use backup_site()
	# If not use backup_all()
	if (( $arg_count == 1 )); then
		echo "Backing up all sites for $user"
		backup_all
	else
		echo "Backing up $site only"
		backup_site
	fi
}
backup_all() {
	# Backup all sites
	# Pass a list of configurations to dumpdb()
	ls $sitesdir/*/configuration.php 2> /dev/null > $file1; ls $sitesdir/*/wp-config.php 2> /dev/null >> $file1
	echo "Dumping Database..."
	dump_db
	# Move the databases to the user's sites directory to include then in the tar archive 
	echo "Moving DB dump to $sitesdir..."
	find /tmp -type f -ctime -1 -name "*.sql" -exec mv {} "$sitesdir"/ \;
	# Tar the user's sites
	echo "Tarring $sitesdir. Please be patient this can take a long time..."
	/bin/tar cfpz $tarfile_all "$sitesdir" 2> /dev/null
}
backup_site() {
	# Backup the specified site
	# Check if the site exists in the user's directory
	if [ -d "$sitesdir"/"$site" ]; then
		# If found pass the configuration to dump_db()
                ls "$sitesdir"/"$site"/configuration.php 2> /dev/null > $file1; ls "$sitesdir"/"$site"/wp-config.php 2> /dev/null >> $file1
		dump_db
		# Move the database dump into the site file to include it in the tar archive
		echo "moving DB dump to $sitesdir"/"$site"
		find /tmp -type f -ctime -1 -name "*.sql" -exec mv {} "$sitesdir"/"$site"/ \;
		# Tar the user's site directory
		echo "Tarring $sitesdir/$site please be patient this can take a long time"
		/bin/tar cfpz "$tarfile_site" "$sitesdir"/"$site" 2> /dev/null
        else
		# If the site does not exist suggest one from ls
                echo "The site, $site was not found for user $user"
		echo "Perhaps you meant one of these:"
		ls $sitesdir	
                exit 2
        fi
}

dump_db() {
# Run cmsdump.pl and remove the temporary files
	echo "#!/bin/bash" > $file2
	while read f; do
        	cmsdump.pl $f >> $file2
	done < $file1
	chmod o+x $file2
#	cat $file2
	./$file2 > /dev/null 2> /dev/null
	/bin/rm $file1
	/bin/rm $file2
}
show_complete() {
	# Show a list of backup files
	echo "Backup complete (The database dump is in the tar archive,) here is your file:"
	if [ -f "$tarfile_all" ]; then
		ls -lah $tarfile_all
	else
		ls -lah $tarfile_site
	fi
}
aws_s3() {
	# Prompt the user if they would like to copy the backups to AWS S3
	# The server must have aws-cli installed and permissions to write to the bucket
	echo "Would you like to copy the archive to S3? (y,n):  "
	read ans
	if [ $ans == "y" ]; then
		s3_cp
	else
		echo "Skipping S3, run the following command to copy the backup to S3:"
		print_s3
		exit 0
	fi
}
s3_cp() {
	# Copy the tar archive to AWS S3
	# Look for a full backup
	if [ -f "$tarfile_all" ]; then
		aws s3 cp "$tarfile_all" "$s3_path"
	# Look for a single site backup
	elif [ -f "$tarfile_site" ]; then
		aws s3 cp "$tarfile_site" "$s3_path" 
	else
		echo "No tar file was found in $userhome"
		exit 5
	fi
	if (( $? == 0 )); then
			echo "Success!"
			aws s3 ls "$s3_path"
		else
			echo "There was an error copying the files to S3."
			exit 4
		fi
}
print_s3() {
	# Print the command to copy the tar archive to AWS S3
	# Look for a full backup
        if [ -f $tarfile_all ]; then
               echo "aws s3 cp $tarfile_all $s3_path"
	# Look for a single site backup
        elif [ -f $tarfile_site ]; then
                echo "aws s3 cp $tarfile_site $s3_path"
        else
                echo "There was an error! Please check your arguments and run the command again."
                exit 6
        fi
}
notify() {
	# Send a notification email when the script completes
	echo "$notice $reminder" | mail -s "NOTICE `who | cut -d'(' -f2 | cut -d')' -f1`" $email 
}
##### End functions ###########################################################
main
